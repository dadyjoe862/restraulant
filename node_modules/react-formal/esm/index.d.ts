import { AnyObjectSchema, InferType, ValidationError } from 'yup';
import Field, { useMergedEventHandlers } from './Field';
import FieldArray from './FieldArray';
import FormComponent, { getter, setter } from './Form';
import Submit from './Submit';
import Message from './Message';
import NestedForm from './NestedForm';
import Summary from './Summary';
import useField, { ValidateStrategies, splitFieldProps } from './useField';
import useFormValues from './useFormValues';
import useForm from './useForm';
import useFieldArray from './useFieldArray';
import useFormSubmit from './useFormSubmit';
import useErrors from './useErrors';
import useTouched from './useTouched';
import Reset from './Reset';
import useFormReset from './useFormReset';
export type Form = typeof FormComponent;
export type FieldArrayHelpers = import('./useFieldArray').FieldArrayHelpers;
export type FieldArrayMeta = import('./useFieldArray').FieldArrayMeta;
export type UseFieldArrayOptions = import('./useFieldArray').UseFieldArrayOptions;
export type FieldMeta = import('./useField').FieldMeta;
export type UseFieldProps = import('./useField').UseFieldProps;
export type UseFieldOptions = import('./useField').UseFieldOptions;
export type JsonError = import('./utils/errToJSON').JsonError;
export type FieldProps = import('./Field').FieldProps;
export type FieldRenderProps = import('./Field').FieldRenderProps;
export type FieldInjectedProps = import('./Field').FieldInjectedProps;
export type MessageProps = import('./Message').MessageProps;
export type FormProps<TSchema extends AnyObjectSchema, TValue = InferType<TSchema>> = import('./Form').FormProps<TSchema, TValue>;
export interface FormStatics {
    Field: typeof Field;
    FieldArray: typeof FieldArray;
    Message: typeof Message;
    Submit: typeof Submit;
    Reset: typeof Reset;
    Summary: typeof Summary;
}
declare const setDefaults: (defaults?: {}) => void;
declare const toFormErrors: (err: ValidationError) => Record<string, import("./utils/errToJSON").JsonError[]>;
declare const formStatics: FormStatics;
export { formStatics, NestedForm, useField, useMergedEventHandlers, useFieldArray, useFormSubmit, useFormReset, useFormValues, useForm, useErrors, useTouched, splitFieldProps, ValidateStrategies, setDefaults, toFormErrors, getter, setter, };
export type ReactFormal = typeof FormComponent & FormStatics;
declare const _default: ReactFormal;
export default _default;
