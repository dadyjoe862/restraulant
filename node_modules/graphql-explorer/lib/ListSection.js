"use strict";

exports.__esModule = true;
exports.ListSectionBase = ListSectionBase;
exports.default = ListSection;

var g = _interopRequireWildcard(require("graphql"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _startCase = _interopRequireDefault(require("lodash/startCase"));

var _react = _interopRequireWildcard(require("react"));

var _ExplorerContext = require("./ExplorerContext");

var _Panel = _interopRequireDefault(require("./Panel"));

var _PanelContainer = _interopRequireWildcard(require("./ui/PanelContainer"));

var _Table = _interopRequireDefault(require("./ui/Table"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ListSectionBase({
  items,
  itemType
}) {
  const explorer = (0, _ExplorerContext.useExplorer)();
  const isScalar = explorer.queryBuilder.isScalarType(itemType);
  const {
    pushPanel
  } = (0, _PanelContainer.usePanelContext)();
  const baseFragment = (0, _react.useMemo)(() => explorer.queryBuilder.getFragment(itemType), [explorer.queryBuilder, itemType]);
  const handleItemClick = (0, _react.useMemo)(() => {
    if (g.isListType(itemType)) return undefined;
    if (baseFragment === undefined) return undefined;
    const resolvedQuery = explorer.resolveQuery(itemType);
    if (!resolvedQuery) return item => {
      const title = (0, _startCase.default)(itemType.name);

      const newPanel = /*#__PURE__*/_react.default.createElement(_Panel.default, {
        title: title,
        type: itemType,
        execute: () => Promise.resolve(item),
        formArgs: [],
        allowSubFragment: false
      });

      pushPanel(newPanel);
    };
    return item => {
      const title = (0, _startCase.default)(itemType.name);

      const newPanel = /*#__PURE__*/_react.default.createElement(_Panel.default, {
        title: title,
        type: itemType,
        execute: async (_, fragment = baseFragment) => {
          const resp = await resolvedQuery(fragment, item, itemType);
          return resp;
        },
        formArgs: [],
        allowSubFragment: true
      });

      pushPanel(newPanel);
    };
  }, [baseFragment, explorer, itemType, pushPanel]);
  const isClickable = !!handleItemClick;
  const fetchedFields = (0, _react.useMemo)(() => {
    if (g.isObjectType(itemType) && !!items[0]) {
      const cols = Object.keys(items[0]).filter(c => c !== 'id' && c !== '__typename');
      return cols;
    }

    return [];
  }, [itemType, items]);
  const header = (0, _react.useMemo)(() => {
    if (fetchedFields.length === 0) return null;
    return fetchedFields.map(col => /*#__PURE__*/_react.default.createElement("th", {
      key: col
    }, col));
  }, [fetchedFields]);

  const printObject = obj => {
    const otherKeys = Object.keys(obj).filter(o => o !== 'id' && o !== '__typename');
    return otherKeys.length > 0 ? obj[otherKeys[0]] : obj.id;
  };

  const getRowContent = (0, _react.useCallback)(item => {
    if (isScalar) return /*#__PURE__*/_react.default.createElement("td", null, item);
    if (fetchedFields.length === 0) return /*#__PURE__*/_react.default.createElement("td", null, "\u2014");
    return fetchedFields.map(f => /*#__PURE__*/_react.default.createElement("td", {
      key: f
    }, (0, _isPlainObject.default)(item[f]) ? printObject(item[f]) : item[f]));
  }, [fetchedFields, isScalar]);
  const rows = (0, _react.useMemo)(() => items.map((item, index) => {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/no-array-index-key
      _react.default.createElement(_Table.default.Row, {
        key: index,
        data: item,
        onClick: handleItemClick
      }, getRowContent(item))
    );
  }), [getRowContent, handleItemClick, items]);

  if (g.isListType(itemType)) {
    return /*#__PURE__*/_react.default.createElement(_PanelContainer.default.Body, null, /*#__PURE__*/_react.default.createElement("h4", null, "Cannot display nested lists"));
  }

  if (items.length === 0) {
    return /*#__PURE__*/_react.default.createElement(_PanelContainer.default.Body, null, /*#__PURE__*/_react.default.createElement("h4", null, "No items found"));
  }

  return /*#__PURE__*/_react.default.createElement(_PanelContainer.default.Body, null, /*#__PURE__*/_react.default.createElement(_Table.default, {
    clickable: isClickable,
    header: header,
    fixed: true
  }, rows));
}

function ListSection({
  item: items,
  type: listType
}) {
  const itemType = g.getNullableType(listType.ofType);
  return /*#__PURE__*/_react.default.createElement(ListSectionBase, {
    items: items,
    itemType: itemType
  });
}