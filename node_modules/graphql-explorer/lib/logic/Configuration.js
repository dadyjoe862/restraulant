"use strict";

exports.__esModule = true;
exports.default = void 0;

var _client = require("@apollo/client");

var g = _interopRequireWildcard(require("graphql"));

var _camelCase = _interopRequireDefault(require("lodash/camelCase"));

var _schema = _interopRequireDefault(require("../forms/schema"));

var _helpers = require("../helpers");

var _connectionResolver = _interopRequireDefault(require("../resolvers/connectionResolver"));

var _jsonInputResolver = _interopRequireDefault(require("../resolvers/jsonInputResolver"));

var _listResolver = _interopRequireDefault(require("../resolvers/listResolver"));

var _objectResolver = _interopRequireDefault(require("../resolvers/objectResolver"));

var _scalarResolver = _interopRequireDefault(require("../resolvers/scalarResolver"));

var _QueryBuilder = _interopRequireDefault(require("./QueryBuilder"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable no-console */
class Configuration {
  constructor(schema, client) {
    this.typeResolvers = [(0, _listResolver.default)(this), (0, _connectionResolver.default)(this), (0, _objectResolver.default)(this), (0, _scalarResolver.default)(this)];
    this.inputFieldResolvers = [(0, _jsonInputResolver.default)(this)];
    this.fieldResolvers = [];
    this.schema = schema;
    this.client = client;
    this.queryBuilder = new _QueryBuilder.default(this);
    this.schemaBuilder = new _schema.default(this);
  }

  resolveType(type) {
    return this.typeResolvers.find(r => r.check(type));
  }

  resolveInputField(type, field) {
    return this.inputFieldResolvers.find(r => r.check(type, field));
  }

  resolveField(type, field) {
    return this.fieldResolvers.find(r => r.check(type, field));
  }

  resolveQuery(type) {
    if (type.name === this.schema.getQueryType().name) {
      return this.rootQuery.bind(this);
    }

    if (g.isObjectType(type) && (0, _helpers.isNode)(type)) {
      return this.nodeQuery.bind(this);
    }

    return undefined;
  }

  serializeError(error) {
    return new Error(JSON.stringify(error, undefined, 2));
  }

  async rootQuery(fragment) {
    console.log('executing', fragment);

    try {
      const response = await this.client.query({
        query: (0, _client.gql)(fragment),
        fetchPolicy: 'no-cache'
      });
      return response.data;
    } catch (err) {
      console.warn(err);
      throw this.serializeError(err);
    }
  }

  async nodeQuery(fragment, item, type) {
    const args = this.schema.getQueryType().getFields().node.args;
    const input = {
      id: item.id
    };
    const nodeArgs = this.queryBuilder.serializeArgsInline(input, args);
    const data = await this.rootQuery(`{
      node ${nodeArgs} {
        ... on ${type.name} ${fragment}
      }
    }`);
    return data.node;
  }

  async mutate(fragment, variables) {
    console.log('executing', fragment);

    try {
      const response = await this.client.mutate({
        mutation: (0, _client.gql)(fragment),
        fetchPolicy: 'no-cache',
        variables
      });
      return response.data;
    } catch (err) {
      console.warn(err);
      throw this.serializeError(err);
    }
  }

  getMutationsForNode(type, item) {
    const idArgName = `${(0, _camelCase.default)(type.name)}Id`;
    const mutationType = this.schema.getMutationType();
    const mutations = Object.values((mutationType == null ? void 0 : mutationType.getFields()) || {});
    return mutations.map(mutation => {
      let fields = mutation.args;
      let parentField;

      if (fields.length === 1) {
        parentField = fields[0].name;
        const onlyField = g.getNullableType(fields[0].type);

        if (g.isInputObjectType(onlyField)) {
          fields = Object.values(onlyField.getFields());
        }
      }

      const idField = fields.find(f => g.isScalarType(g.getNullableType(f.type)) && f.name === idArgName);
      let defaultValue;

      if (idField) {
        defaultValue = Object.assign({}, item, {
          [idArgName]: item.id
        });

        if (parentField) {
          defaultValue = {
            [parentField]: defaultValue
          };
        }
      }

      return {
        mutation,
        defaultValue
      };
    }).filter(({
      defaultValue
    }) => !!defaultValue);
  }

  getMutationsForType(type, item) {
    var _this$schema$getQuery;

    const resolver = this.resolveType(type);

    if (resolver != null && resolver.getMutations) {
      return resolver.getMutations(type, item);
    }

    const mutationType = this.schema.getMutationType();
    if (!mutationType) return [];
    const mutations = Object.values((mutationType == null ? void 0 : mutationType.getFields()) || {});

    if (((_this$schema$getQuery = this.schema.getQueryType()) == null ? void 0 : _this$schema$getQuery.name) === type.name) {
      return mutations.map(mutation => ({
        mutation,
        defaultValue: undefined
      }));
    }

    if ((0, _helpers.isNode)(type)) {
      return this.getMutationsForNode(type, item);
    }

    return [];
  }

}

exports.default = Configuration;