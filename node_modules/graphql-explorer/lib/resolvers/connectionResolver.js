"use strict";

exports.__esModule = true;
exports.default = void 0;

var g = _interopRequireWildcard(require("graphql"));

var _react = _interopRequireDefault(require("react"));

var _ConnectionSection = _interopRequireDefault(require("../ConnectionSection"));

var _helpers = require("../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const CONNECTION_ARGS = new Set(['first', 'after', 'last', 'before']);

function isEdge(type, nodeType) {
  // eslint-disable-next-line no-param-reassign
  type = g.getNullableType(type);
  if (!(type instanceof g.GraphQLObjectType)) return false;
  const {
    node,
    cursor
  } = type.getFields();
  const realNodeType = g.getNullableType(node.type);
  return node && cursor && // cursor must be a string
  g.getNullableType(cursor.type) === g.GraphQLString && // node type must be a node type
  realNodeType instanceof g.GraphQLObjectType && (0, _helpers.isNode)(realNodeType) && (!nodeType || g.getNullableType(node.type) === nodeType);
}
/**
 * checks whether the specified object is a connection
 */


function isConnection(type) {
  if (!(type instanceof g.GraphQLObjectType)) return false;
  const {
    pageInfo,
    edges
  } = type.getFields();
  if (!pageInfo || !edges) return false;
  const pageInfoType = g.getNullableType(pageInfo.type);
  const edgesType = g.getNullableType(edges.type);
  if (!(edgesType instanceof g.GraphQLList)) return false;
  const edgeType = g.getNullableType(edgesType.ofType);
  return pageInfoType instanceof g.GraphQLObjectType && pageInfoType.name === 'PageInfo' && isEdge(edgeType);
}

function getConnectionNodeType(type) {
  const fields = type.getFields();
  const edgesType = g.getNullableType(fields.edges.type);
  const edgeType = edgesType.ofType;
  const nodeType = edgeType.getFields().node.type;
  return g.getNullableType(nodeType);
}

const connectionResolver = config => ({
  check: isConnection,
  Section: props => /*#__PURE__*/_react.default.createElement(_ConnectionSection.default, _extends({}, props, {
    itemType: getConnectionNodeType(props.type)
  })),
  getObjectFragment: type => {
    const nodeType = getConnectionNodeType(type);
    const nodeFragment = config.queryBuilder.getObjectTypeFragment(nodeType, config.queryBuilder.getListableScalarFields(nodeType));
    return `{
        edges {
          node {
            ${nodeFragment}
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }`;
  },
  getDefaultArgs: () => ({
    first: 10
  }),
  getFormArgs: args => args.filter(arg => !CONNECTION_ARGS.has(arg.name))
});

var _default = connectionResolver;
exports.default = _default;