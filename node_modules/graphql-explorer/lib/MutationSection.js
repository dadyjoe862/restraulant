"use strict";

exports.__esModule = true;
exports.default = MutationSection;

var g = _interopRequireWildcard(require("graphql"));

var _startCase = _interopRequireDefault(require("lodash/startCase"));

var _react = _interopRequireWildcard(require("react"));

var _Accordion = _interopRequireDefault(require("react-bootstrap/Accordion"));

var _ListGroup = _interopRequireDefault(require("react-bootstrap/ListGroup"));

var _md = require("react-icons/md");

var _ExplorerContext = require("./ExplorerContext");

var _Panel = _interopRequireDefault(require("./Panel"));

var _PanelContainer = _interopRequireWildcard(require("./ui/PanelContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function MutationSectionListItem({
  mutation,
  defaultValue
}) {
  const explorer = (0, _ExplorerContext.useExplorer)();
  const outputType = g.getNullableType(mutation.type);
  const title = (0, _startCase.default)(mutation.name).toLowerCase();
  const {
    pushPanel
  } = (0, _PanelContainer.usePanelContext)();
  const handleClick = (0, _react.useCallback)(() => {
    const newPanel = /*#__PURE__*/_react.default.createElement(_Panel.default, {
      title: title,
      type: outputType,
      execute: async input => {
        const fragment = g.isObjectType(outputType) ? explorer.queryBuilder.getNestedFragment(outputType) : '';
        const vars = explorer.queryBuilder.serializeVariableDefinitions(Object.keys(input), mutation.args);
        const resp = await explorer.mutate(`mutation ${vars.definitions} {
              item: ${mutation.name} ${vars.assignments} ${fragment}
            }`, input);
        return resp.item;
      },
      formArgs: mutation.args,
      defaultFormValue: defaultValue,
      allowSubFragment: false
    });

    pushPanel(newPanel);
  }, [defaultValue, explorer, mutation.args, mutation.name, outputType, pushPanel, title]);
  return /*#__PURE__*/_react.default.createElement(_ListGroup.default.Item, {
    action: true,
    onClick: handleClick
  }, /*#__PURE__*/_react.default.createElement("b", null, title));
}

function MutationSection({
  type,
  item
}) {
  const explorer = (0, _ExplorerContext.useExplorer)();
  const mutations = explorer.getMutationsForType(type, item);

  if (mutations.length === 0) {
    return null;
  }

  const mutationItems = mutations.map(m => /*#__PURE__*/_react.default.createElement(MutationSectionListItem, _extends({
    key: m.mutation.name
  }, m)));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Accordion.default.Toggle, {
    as: _PanelContainer.default.Header,
    eventKey: "mutations",
    style: {
      cursor: 'pointer'
    }
  }, /*#__PURE__*/_react.default.createElement("span", null, "Mutations"), /*#__PURE__*/_react.default.createElement(_md.MdExpandMore, {
    className: "float-right"
  })), /*#__PURE__*/_react.default.createElement(_Accordion.default.Collapse, {
    eventKey: "mutations"
  }, /*#__PURE__*/_react.default.createElement(_ListGroup.default, {
    variant: "flush"
  }, mutationItems)));
}