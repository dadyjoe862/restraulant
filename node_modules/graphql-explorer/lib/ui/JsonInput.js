"use strict";

exports.__esModule = true;
exports.JsonInput = JsonInput;
exports.jsonField = void 0;

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _Form = _interopRequireDefault(require("react-bootstrap/Form"));

var yup = _interopRequireWildcard(require("yup"));

const _excluded = ["value", "onChange"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const INVALID_JSON = Symbol('invalid json'); // sentinel value

const jsonField = () => yup.mixed().test({
  name: 'isJson',
  test: v => v !== INVALID_JSON,
  message: 'invalid JSON payload'
});

exports.jsonField = jsonField;

function JsonInput(_ref) {
  let {
    value,
    onChange
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  const serialize = (0, _react.useCallback)(v => JSON.stringify(v, undefined, 2), []);
  const [innerValue, setInnerValue] = (0, _react.useState)(serialize(value));
  const parsedInnerValue = (0, _react.useMemo)(() => {
    try {
      return JSON.parse(innerValue);
    } catch (e) {
      return INVALID_JSON;
    }
  }, [innerValue]);
  (0, _react.useEffect)(() => {
    if (parsedInnerValue !== INVALID_JSON && value !== INVALID_JSON && !(0, _isEqual.default)(value, parsedInnerValue)) {
      setInnerValue(serialize(value));
    }
  }, [innerValue, parsedInnerValue, serialize, value]);
  const handleChange = (0, _react.useCallback)(e => {
    const newValue = e.target.value;

    try {
      const parsedNewValue = JSON.parse(newValue);
      onChange(parsedNewValue);
    } catch (ex) {
      onChange(INVALID_JSON);
    }

    setInnerValue(newValue);
  }, [onChange]);
  return /*#__PURE__*/_react.default.createElement(_Form.default.Control, _extends({}, props, {
    as: "textarea",
    rows: 3,
    style: {
      fontFamily: 'monospace'
    },
    value: innerValue,
    onChange: handleChange
  }));
}