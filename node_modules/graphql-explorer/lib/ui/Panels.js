"use strict";

exports.__esModule = true;
exports.default = Panels;

var _react = _interopRequireWildcard(require("react"));

var _PanelContainer = _interopRequireDefault(require("./PanelContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function usePanelState(initialPanel) {
  const panelIdCounter = (0, _react.useRef)(0);
  const [panels, setPanels] = (0, _react.useState)([{
    panel: initialPanel,
    panelId: panelIdCounter.current++
  }]);
  const pushPanel = (0, _react.useCallback)((panelId, panel) => {
    const index = panels.findIndex(p => p.panelId === panelId);
    setPanels([...panels.slice(0, index + 1), {
      panel,
      panelId: panelIdCounter.current++
    }]);
  }, [panels]);
  const closePanel = (0, _react.useCallback)(panelId => {
    const index = panels.findIndex(p => p.panelId === panelId);
    setPanels([...panels.slice(0, index)]);
  }, [panels]);
  const closeChildPanel = (0, _react.useCallback)(panelId => {
    const index = panels.findIndex(p => p.panelId === panelId);
    setPanels([...panels.slice(0, index + 1)]);
  }, [panels]);
  return {
    panels,
    pushPanel,
    closePanel,
    closeChildPanel
  };
}

function Panels({
  colWidth = '40rem',
  initialPanel
}) {
  const {
    panels,
    pushPanel,
    closePanel,
    closeChildPanel
  } = usePanelState(initialPanel);
  const numCols = panels.length;
  const gridTemplateColumns = Array.from(Array(numCols)).map(() => colWidth).join(' ');
  const containerRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    if (containerRef.current) {
      containerRef.current.scrollLeft = +100000000000;
    }
  }, [numCols]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: containerRef,
    className: "ge-Panels" // the two 1px add some margin
    ,
    style: {
      gridTemplateColumns: `1px ${gridTemplateColumns} 1px`
    }
  }, /*#__PURE__*/_react.default.createElement("span", null), panels.map(({
    panel,
    panelId
  }) => /*#__PURE__*/_react.default.createElement(_PanelContainer.default, {
    key: panelId,
    panelId: panelId,
    pushPanel: pushPanel,
    closePanel: closePanel,
    closeChildPanel: closeChildPanel
  }, panel)), /*#__PURE__*/_react.default.createElement("span", null));
}