"use strict";

exports.__esModule = true;
exports.usePanelContext = usePanelContext;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Card = _interopRequireDefault(require("react-bootstrap/Card"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const PanelContext = /*#__PURE__*/_react.default.createContext(null);

function usePanelContext() {
  return (0, _react.useContext)(PanelContext);
}

function PanelContainer({
  children,
  panelId,
  closePanel,
  pushPanel,
  closeChildPanel
}) {
  const onPushPanel = (0, _react.useCallback)(panel => pushPanel(panelId, panel), [panelId, pushPanel]);
  const onclosePanel = (0, _react.useCallback)(() => closePanel(panelId), [closePanel, panelId]);
  const onCloseChildPanel = (0, _react.useCallback)(() => closeChildPanel(panelId), [panelId, closeChildPanel]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "ge-Panel-container"
  }, /*#__PURE__*/_react.default.createElement(PanelContext.Provider, {
    value: {
      closePanel: onclosePanel,
      pushPanel: onPushPanel,
      closeChildPanel: onCloseChildPanel
    }
  }, /*#__PURE__*/_react.default.createElement(_Card.default, {
    className: "ge-Panel-card"
  }, children)));
}

var _default = Object.assign(PanelContainer, {
  Header: props => /*#__PURE__*/_react.default.createElement(_Card.default.Header, _extends({}, props, {
    className: "ge-PanelHeader"
  })),
  Divider: () => /*#__PURE__*/_react.default.createElement("hr", {
    className: "ge-Panel-divider"
  }),
  Body: _Card.default.Body
});

exports.default = _default;