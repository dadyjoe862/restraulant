"use strict";

exports.__esModule = true;
exports.default = ObjectSection;

var g = _interopRequireWildcard(require("graphql"));

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _sortBy = _interopRequireDefault(require("lodash/sortBy"));

var _startCase = _interopRequireDefault(require("lodash/startCase"));

var _react = _interopRequireWildcard(require("react"));

var _Accordion = _interopRequireDefault(require("react-bootstrap/Accordion"));

var _ListGroup = _interopRequireDefault(require("react-bootstrap/ListGroup"));

var _md = require("react-icons/md");

var _ExplorerContext = require("./ExplorerContext");

var _MutationSection = _interopRequireDefault(require("./MutationSection"));

var _Panel = _interopRequireDefault(require("./Panel"));

var _PanelContainer = _interopRequireWildcard(require("./ui/PanelContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function FieldComponent({
  title,
  canExecute,
  item
}) {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("b", null, title), !canExecute && `: ${item}`);
}

function ObjectSectionField({
  type,
  field,
  fieldValue,
  executeQuery
}) {
  const title = (0, _startCase.default)(field.name).toLowerCase();
  const fieldType = g.getNullableType(field.type);
  const hasValue = fieldValue !== undefined;
  const isObject = (0, _isPlainObject.default)(fieldValue);
  const {
    pushPanel
  } = (0, _PanelContainer.usePanelContext)();
  const explorer = (0, _ExplorerContext.useExplorer)();
  const resolver = explorer.resolveType(fieldType);
  const canExecute = isObject || !hasValue && !!executeQuery;
  const Component = (0, _react.useMemo)(() => {
    var _fieldResolver$Compon;

    const fieldResolver = explorer.resolveField(type, field);
    return (_fieldResolver$Compon = fieldResolver == null ? void 0 : fieldResolver.Component) != null ? _fieldResolver$Compon : FieldComponent;
  }, [explorer, field, type]);

  const handleClick = () => {
    let newPanel;

    if (isObject && !executeQuery) {
      newPanel = /*#__PURE__*/_react.default.createElement(_Panel.default, {
        title: title,
        type: fieldType,
        execute: () => Promise.resolve(fieldValue),
        formArgs: [],
        allowSubFragment: false
      });
    } else {
      newPanel = /*#__PURE__*/_react.default.createElement(_Panel.default, {
        title: title,
        type: fieldType,
        execute: async (input, fragment = explorer.queryBuilder.getFragment(fieldType)) => {
          const itemArgs = explorer.queryBuilder.serializeArgsInline(input, field.args);
          const resp = await executeQuery(`{
                item: ${field.name} ${itemArgs} ${fragment}
              }`);
          return resp.item;
        },
        formArgs: resolver != null && resolver.getFormArgs ? resolver == null ? void 0 : resolver.getFormArgs(field.args) : field.args,
        defaultFormValue: resolver != null && resolver.getDefaultArgs ? resolver.getDefaultArgs(fieldType) : undefined // XXX move it to more pluggable
        ,
        allowSubFragment: true
      });
    }

    pushPanel(newPanel);
  };

  return /*#__PURE__*/_react.default.createElement(_ListGroup.default.Item, {
    action: canExecute,
    onClick: canExecute ? handleClick : undefined,
    key: field.name,
    variant: canExecute ? undefined : 'light',
    style: {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    }
  }, /*#__PURE__*/_react.default.createElement(Component, {
    title: title,
    item: fieldValue,
    canExecute: canExecute,
    field: field
  }));
}

function ObjectSection({
  item,
  type,
  executeQuery: executeQueryBase
}) {
  const explorer = (0, _ExplorerContext.useExplorer)();
  const executeQuery = (0, _react.useMemo)(() => {
    const resolvedQuery = explorer.resolveQuery(type);
    if (!resolvedQuery) return executeQueryBase;
    return fragment => resolvedQuery(fragment, item, type);
  }, [executeQueryBase, explorer, item, type]);
  const sortedFields = (0, _sortBy.default)(Object.values(type.getFields()), f => item[f.name] === undefined ? 1 : 0, f => f.name);
  const fields = sortedFields.map(field => /*#__PURE__*/_react.default.createElement(ObjectSectionField, {
    key: field.name,
    executeQuery: executeQuery,
    field: field,
    fieldValue: item[field.name],
    type: type
  }));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Accordion.default, {
    defaultActiveKey: "fields"
  }, /*#__PURE__*/_react.default.createElement(_MutationSection.default, {
    item: item,
    type: type
  }), /*#__PURE__*/_react.default.createElement(_Accordion.default.Toggle, {
    as: _PanelContainer.default.Header,
    eventKey: "fields",
    style: {
      cursor: 'pointer'
    }
  }, /*#__PURE__*/_react.default.createElement("span", null, "Fields"), /*#__PURE__*/_react.default.createElement(_md.MdExpandMore, {
    className: "float-right"
  })), /*#__PURE__*/_react.default.createElement(_Accordion.default.Collapse, {
    eventKey: "fields"
  }, /*#__PURE__*/_react.default.createElement(_ListGroup.default, {
    variant: "flush"
  }, fields))));
}