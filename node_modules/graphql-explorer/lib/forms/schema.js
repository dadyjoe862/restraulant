"use strict";

exports.__esModule = true;
exports.default = void 0;

var g = _interopRequireWildcard(require("graphql"));

var yup = _interopRequireWildcard(require("yup"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// eslint-disable-next-line max-classes-per-file
function makeRequired(type, schema) {
  if (type instanceof g.GraphQLList) {
    // array's `required` semantic requires the array to not be empty
    return schema.default([]);
  }

  return schema.required();
}

class SchemaBuilder {
  constructor(config) {
    this.inputObjectCache = {};
    this.enumObjectCache = {};
    this.config = config;
  }

  getSchemaFromType(type, field) {
    const customInput = this.config.resolveInputField(type, field);

    if (customInput) {
      return customInput.getSchema(type).meta({
        Component: customInput.Component,
        field
      });
    }

    if (type instanceof g.GraphQLNonNull) {
      const innerSchema = this.getSchemaFromType(type.ofType, field);
      return makeRequired(type.ofType, innerSchema).meta({
        field
      });
    }

    if (type === g.GraphQLInt) {
      return yup.number().integer().meta({
        field
      });
    }

    if (type === g.GraphQLFloat) {
      return yup.number().meta({
        field
      });
    }

    if (type === g.GraphQLBoolean) {
      return yup.bool().meta({
        field
      }).default(false);
    } // treat all the other scalar types as string


    if (type instanceof g.GraphQLScalarType) {
      return yup.string().meta({
        field
      }).default(undefined) // explicitly set empty strings as undefined
      .transform(v => v === '' ? undefined : v);
    }

    if (type instanceof g.GraphQLEnumType) {
      if (!(type.name in this.enumObjectCache)) {
        this.enumObjectCache[type.name] = type.getValues().map(e => e.value);
      }

      return yup.mixed().oneOf(this.enumObjectCache[type.name]).meta({
        field
      });
    }

    if (type instanceof g.GraphQLList) {
      const innerType = this.getSchemaFromType(type.ofType, field);
      return yup.array(innerType).meta({
        field
      });
    }

    if (type instanceof g.GraphQLInputObjectType) {
      if (!this.inputObjectCache[type.name]) {
        const objectFields = {};
        Object.values(type.getFields()).forEach(subField => {
          objectFields[subField.name] = yup.lazy(() => this.getSchemaFromType(subField.type, subField));
        });
        this.inputObjectCache[type.name] = yup.object(objectFields).meta({
          field
        }).default(undefined);
      }

      return this.inputObjectCache[type.name];
    }

    throw new Error(`unsupported type ${type}`);
  }

  getSchemaFromArguments(args) {
    const subFields = {};

    for (const argument of args) {
      subFields[argument.name] = this.getSchemaFromType(argument.type, argument);
    }

    return yup.object(subFields);
  }

}

exports.default = SchemaBuilder;