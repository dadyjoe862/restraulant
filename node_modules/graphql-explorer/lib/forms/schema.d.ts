/// <reference types="react" />
import * as g from 'graphql';
import * as yup from 'yup';
import { ConfigurationInterface } from '../logic/Configuration';
export interface SchemaMeta {
    field: g.GraphQLInputField;
    Component?: React.ElementType<any>;
}
export default class SchemaBuilder {
    protected config: ConfigurationInterface;
    inputObjectCache: Record<string, yup.ObjectSchema<any>>;
    enumObjectCache: Record<string, string[]>;
    constructor(config: ConfigurationInterface);
    getSchemaFromType(type: g.GraphQLInputType, field: g.GraphQLArgument | g.GraphQLInputField): yup.BaseSchema<any>;
    getSchemaFromArguments(args: (g.GraphQLArgument | g.GraphQLInputField)[]): import("yup/lib/object").OptionalObjectSchema<{
        [idx: string]: yup.BaseSchema<any, import("yup/lib/types").AnyObject, any>;
    }, Record<string, any>, import("yup/lib/object").TypeOfShape<{
        [idx: string]: yup.BaseSchema<any, import("yup/lib/types").AnyObject, any>;
    }>>;
}
//# sourceMappingURL=schema.d.ts.map