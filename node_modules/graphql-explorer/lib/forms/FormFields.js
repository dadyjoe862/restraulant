"use strict";

exports.__esModule = true;
exports.resolveLazy = resolveLazy;
exports.isYupArray = isYupArray;
exports.isYupObject = isYupObject;
exports.default = FormFields;

var _graphql = require("graphql");

var _react = _interopRequireWildcard(require("react"));

var _Button = _interopRequireDefault(require("react-bootstrap/Button"));

var _Form = _interopRequireDefault(require("react-bootstrap/Form"));

var _reactFormal = _interopRequireWildcard(require("react-formal"));

var _FormField = _interopRequireDefault(require("./FormField"));

const _excluded = ["schema", "name"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function resolveLazy(schema) {
  return schema.resolve ? schema.resolve({}) : schema;
}

function isYupArray(s) {
  return s.type === 'array';
}

function isYupObject(s) {
  return s.type === 'object';
}

function FieldArray(_ref) {
  let {
    schema,
    name
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  // eslint-disable-next-line no-underscore-dangle
  const subType = resolveLazy(schema._subType);
  const renderContent = (0, _react.useCallback)((value, helpers) => /*#__PURE__*/_react.default.createElement("div", null, (value || []).map((i, idx) => /*#__PURE__*/_react.default.createElement("div", {
    className: "ge-FormFields-field-array-container" // eslint-disable-next-line react/no-array-index-key
    ,
    key: idx
  }, /*#__PURE__*/_react.default.createElement(_FormField.default, {
    name: `${name}[${idx}]`
  }), /*#__PURE__*/_react.default.createElement(_Button.default, {
    onClick: () => helpers.remove(i),
    variant: "danger",
    size: "sm",
    className: "ge-FormFields-field-array-button"
  }, "-"))), /*#__PURE__*/_react.default.createElement(_Button.default, {
    onClick: () => helpers.push(subType.getDefault())
  }, "+")), [name, subType]);
  return /*#__PURE__*/_react.default.createElement(_reactFormal.default.FieldArray, _extends({
    name: name
  }, props), renderContent);
}

const FormLabel = ({
  children
}) => /*#__PURE__*/_react.default.createElement(_Form.default.Label, {
  className: "ge-FormFields-label"
}, /*#__PURE__*/_react.default.createElement("b", null, children));

function NestedFormFields({
  schema,
  fieldName
}) {
  const gqlType = schema.meta().field.type;
  const isRequired = gqlType instanceof _graphql.GraphQLNonNull;
  const [expanded, setExpanded] = (0, _react.useState)(isRequired);
  const expand = (0, _react.useCallback)(() => setExpanded(true), [setExpanded]);

  if (!expanded) {
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Button.default, {
      onClick: expand
    }, "+"));
  }

  return /*#__PURE__*/_react.default.createElement(_reactFormal.NestedForm, {
    name: fieldName
  }, /*#__PURE__*/_react.default.createElement(FormFields, {
    schema: schema
  }));
}

function FormFields({
  schema
}) {
  const renderField = (0, _react.useCallback)((field, fieldName) => {
    // eslint-disable-next-line no-param-reassign
    field = resolveLazy(field); // schema.meta() is undefined for root objects

    const {
      Component
    } = field.meta(); // we use the array and nested helpers only if a component is not specified

    if (!Component) {
      if (isYupArray(field)) {
        return /*#__PURE__*/_react.default.createElement(FieldArray, {
          schema: field,
          name: fieldName
        });
      }

      if (isYupObject(field)) {
        return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(NestedFormFields, {
          schema: field,
          fieldName: fieldName
        }), /*#__PURE__*/_react.default.createElement(_FormField.default.Message, {
          for: fieldName
        }));
      }
    }

    return /*#__PURE__*/_react.default.createElement(_FormField.default, {
      name: fieldName
    });
  }, []); // hide the label IFF the current type has only one field, and this field
  // is an object type - to reduce nesting

  const shouldShowLabel = (0, _react.useMemo)(() => {
    const subFields = Object.values(schema.fields);
    if (subFields.length > 1) return true;
    const [subField] = subFields;
    return !(subField && isYupObject(subField));
  }, [schema.fields]);
  const fields = (0, _react.useMemo)(() => Object.entries(schema.fields).map(([fieldName, field]) => /*#__PURE__*/_react.default.createElement(_Form.default.Group, {
    key: fieldName,
    controlId: fieldName
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "d-flex"
  }, shouldShowLabel && /*#__PURE__*/_react.default.createElement(FormLabel, null, fieldName), /*#__PURE__*/_react.default.createElement("div", {
    className: "d-flex flex-column flex-grow-1"
  }, renderField(field, fieldName))))), [renderField, schema.fields, shouldShowLabel]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, fields);
}